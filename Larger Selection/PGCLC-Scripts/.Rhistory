with(sleep, t.test(extra[group == 1], extra[group == 2]))
t.test(extra ~ group, data = sleep)
with(sleep, t.test(extra[group == 1], extra[group == 2]))
extra[group == 1]
sleep$extra[group == 1]
sleep
sleep$extra
sleep$extra[sleep$group == 1]
t.test(extra ~ group, data = sleep)
MeanComb <- function (Xbar1,n1,Xbar2,n2) {
return (n1 / (n1 + n2)) * Xbar1 + (n2 / (n1 + n2)) * Xbar2)
}
MeanComb <- function (Xbar1,n1,Xbar2,n2) {
return (n1 / (n1 + n2)) * Xbar1 + (n2 / (n1 + n2)) * Xbar2)
}
MeanComb <- function(Xbar1,n1,Xbar2,n2) {
return (n1 / (n1 + n2)) * Xbar1 + (n2 / (n1 + n2)) * Xbar2)
}
{}
MeanComb <- function(Xbar1,n1,Xbar2,n2) {
return(n1 / (n1 + n2)) * Xbar1 + (n2 / (n1 + n2)) * Xbar2)
}
MeanComb <- function(Xbar1,n1,Xbar2,n2) {
return(n1 / (n1 + n2)) * Xbar1 + (n2 / (n1 + n2)) * Xbar2)
MeanComb <- function(Xbar1,n1,Xbar2,n2) {
result <- n1/(n1 + n2)) * Xbar1 + (n2 / (n1 + n2)) * Xbar2
result <- n1/(n1 + n2)) * Xbar1 + (n2 / (n1 + n2)) * Xbar2
result <- n1
MeanComb <- function(Xbar1,n1,Xbar2,n2) {
MeanComb <- function(Xbar1,n1,Xbar2,n2) {
}
}
MeanComb <- function(Xbar1,n1,Xbar2,n2) {
result <- n1
return(result)
}
MeanComb <- function(Xbar1,n1,Xbar2,n2) {
result <- n1 / (n1 + n2) * Xbar1 + n2 / (n1 + n2) * Xbar2
return(result)
}
StdComb <- function (Xbar1,Std1,n1,Xbar2,Std2,n2) {
Var1 <-  Std1 ^ 2
Var2 <-  Std2 ^ 2
VarComb <- (n1 ^ 2 * Var1 + n2 ^ 2 * Var2 - n1 * Var1 - n1 * Var2 - n2 * Var1 - n2 * Var2 + n1 * n2 * Var1 + n1 * n2 * Var2 + n1 * n2 * (Xbar1 - Xbar2) ^ 2) / ((n1 + n2 - 1) * (n1 + n2))
result <- Sqr(VarComb)
return(result)
}
t.dist()
?TDIST
?TDIST()
dt()
?dt()
require(graphics)
1 - pt(1:5, df = 1)
qt(.975, df = c(1:10,20,50,100,1000))
tt <- seq(0, 10, len = 21)
ncp <- seq(0, 6, len = 31)
ptn <- outer(tt, ncp, function(t, d) pt(t, df = 3, ncp = d))
t.tit <- "Non-central t - Probabilities"
image(tt, ncp, ptn, zlim = c(0,1), main = t.tit)
persp(tt, ncp, ptn, zlim = 0:1, r = 2, phi = 20, theta = 200, main = t.tit,
xlab = "t", ylab = "non-centrality parameter",
zlab = "Pr(T <= t)")
plot(function(x) dt(x, df = 3, ncp = 2), -3, 11, ylim = c(0, 0.32),
main = "Non-central t - Density", yaxs = "i")
plot (function(x) dt(x, df=3,ncp-2))
plot (function(x) dt(x,ncp-2))
plot (function(x) dt(x))
plot (function(x) dt(x,df=1,ncp=0))
plot (function(x) dt(x,df=1,ncp=1))
plot (function(x) dt(x,df=1,ncp=2))
plot (function(x) dt(x,df=1,ncp=3))
plot (function(x) dt(x,df=1,ncp=2))
plot (function(x) dt(x,df=2,ncp=2))
plot (function(x) dt(x,df=3,ncp=2))
plot (function(x) dt(x,df=3,ncp=2))
plot (function(x) dt(x,df=5,ncp=2))
plot (function(x) dt(x,df=5,ncp=1))
plot (function(x) dt(x,df=5,ncp=0))
plot (function(x) dt(x,df=5,ncp=1))
plot (function(x) dt(x,df=5,ncp=2))
plot (function(x) dt(x,df=5,ncp=5))
plot (function(x) dt(x,df=5,ncp=1))
plot (function(x) dt(x,df=5))
plot (function(x) dt(x,df=5),xlim=c(-1:1))
plot (function(x) dt(x,df=5),xlim=c(-1,1))
plot (function(x) dt(x,df=5),xlim=c(-4,4))
?pt
t.test(s1,s2)
t.testn <- function (Xbar1,Std1,n1,Xbar2,Std2,n2,mu=0,equal.variance=FALSE) {
if( equal.variance==FALSE )
{
SE <- sqrt( (Std1^2/n1) + (Std2^2/n2) )
# welch-satterthwaite df
df <- ( (Std1^2/n1 + Std1^2/n2)^2 )/( (Std1^2/n1)^2/(n1-1) + (Std1^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
SE <- sqrt( (1/n1 + 1/n2) * ((n1-1)*Std1^2 + (n2-1)*Std1^2)/(n1+n2-2) )
df <- n1 + n2 - 2
}
t <- (Xbar1-Xbar2-mu)/SE
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
t.testn(mean(s1),sd(s1),length(s1),mean(s2),sd(s2),length(s2))
t.testn <- function (Xbar1,Std1,n1,Xbar2,Std2,n2,mu=0,equal.variance=FALSE) {
if( equal.variance==FALSE )
{
SE <- sqrt( (Std1^2/n1) + (Std2^2/n2) )
# welch-satterthwaite df
df <- ( (Std1^2/n1 + Std1^2/n2)^2 )/( (Std1^2/n1)^2/(n1-1) + (Std1^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
SE <- sqrt( (1/n1 + 1/n2) * ((n1-1)*Std1^2 + (n2-1)*Std1^2)/(n1+n2-2) )
df <- n1 + n2 - 2
}
t <- (Xbar1-Xbar2-mu)/SE
dat <- c(Xbar1-Xbar2, SE, t, 2*pt(-abs(t),df))
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
t.testn(mean(s1),sd(s1),length(s1),mean(s2),sd(s2),length(s2))
t.test(s1,s2)
mean(s1)
sd(s1)
length(s1)
length(s2)
t.testn(mean(s1),sd(s1),length(s1),mean(s2),sd(s2),length(s2))
x1 = rnorm(100)
x2 = rnorm(200)
t.testn( mean(x1), sd(x1),100,mean(x2), sd(x2), 200)
t.test(x1,x2)
clear()
resart()
exit()
quit()
x <- rchisq(1000, 4) + rnorm(1000)
y <- rnorm(1000, 7)
smoothScatter(x, y)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=5, pch=1)
x <- rchisq(100, 4) + rnorm(100)
x
y <- rnorm(100, 7)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=5, pch=1)
smoothScatter(x, y)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=10, pch=1)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=10, pch=0)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=10)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=50)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=1)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=0)
smoothScatter(x, y, bandwidth=c(5,1)/3, nrpoints=0)
y <- rnorm(10, 7)
x <- rchisq(10, 4) + rnorm(10)
smoothScatter(x, y, bandwidth=c(5,1)/3, nrpoints=0)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=0)
smoothScatter(x, y)
smoothScatter(x, y, bandwidth=c(3,1)/10, nrpoints=0)
smoothScatter(x, y, bandwidth=c(10,1)/10, nrpoints=0)
smoothScatter(x, y, bandwidth=c(10,3)/10, nrpoints=0)
smoothScatter(x, y, bandwidth=c(10,3), nrpoints=0)
smoothScatter(x, y, bandwidth=c(10,3)/2, nrpoints=0)
smoothScatter(x, y, bandwidth=c(10,3)/3, nrpoints=0)
smoothScatter(x, y, bandwidth=c(5,3)/3, nrpoints=0)
y <- rnorm(10, 7)
x <- rchisq(10, 4) + rnorm(10)
smoothScatter(x, y, bandwidth=c(5,3)/3, nrpoints=0)
y <- rnorm(15, 7)
x <- rchisq(15, 4) + rnorm(10)
x <- rchisq(15, 4) + rnorm(15)
smoothScatter(x, y, bandwidth=c(5,3)/3, nrpoints=0)
x <- rchisq(85, 4) + rnorm(85)
y <- rnorm(85, 7)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=0)
plot(x,y)
y <- rnorm(85, 2)
y <- bnorm(85, 2)
y <- binnorm(85, 2)
y <- biom(85)
y <- binom(85)
y
y <- round(y)
y
plot(x,y)
y <- round(y/2)
plot(x,y)
y <- round(y/2)
plot(x,y)
x
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=0)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=85)
smoothScatter(x, y, bandwidth=c(3,1)/3, nrpoints=85, pch=1)
smoothScatter(x, y, bandwidth=c(1,1)/3, nrpoints=85, pch=1)
x <- c(1,2,1,2)
y <- c(1,0,0,0)
smoothScatter(x, y, bandwidth=c(1,1)/3, nrpoints=85, pch=1)
x <- c(1,0,1,2)
smoothScatter(x, y, bandwidth=c(1,1)/3, nrpoints=85, pch=1)
smoothScatter(x, y)
smoothScatter(x, y, bandwidth=c(1,1)/3)
smoothScatter(x, y, bandwidth=c(1,1)/2)
smoothScatter(x, y, bandwidth=c(1,1)/10)
smoothScatter(x, y, bandwidth=c(1,1)/5)
x <- c(1,0,2)
y <- c(0,1,1)
smoothScatter(x, y, bandwidth=c(1,1)/5)
smoothScatter(x, y, bandwidth=c(5,1)/5)
smoothScatter(x, y, bandwidth=c(2,1)/5)
smoothScatter(x, y, bandwidth=c(3,1)/5)
smoothScatter(x, y, bandwidth=c(4,1)/5)
?smoothScatter
cars.lo <- loess(dist ~ speed, cars)
predict(cars.lo, data.frame(speed = seq(5, 30, 1)), se = TRUE)
# to allow extrapolation
cars.lo2 <- loess(dist ~ speed, cars,
control = loess.control(surface = "direct"))
predict(cars.lo2, data.frame(speed = seq(5, 30, 1)), se = TRUE)
a<- 16717861150380844246015271389168398245436901032358311217835038446929062655448792237114490509578608655662496577974840004057020373
a^9007
b <- a^9007
b <- a^9
b <- a+9
b-a
p <-127
q <- 129
q <- 131
3^(p-1)
3^(p-1)
mod
modulo
fermat.test(p)
q <- 13
p <- 11
N <- p * q
phi <- (p-1)*(q-1)
e <- 23
7^23
mod
3%%2
(7^e)%%N
7^e
7^e/N
e <- 7
(7^e)%%N
7^e
(7^e)/N
.042*N
(7^e)%%N
p = 7
q = 13
N = p * q
phi = (p-1)(q-1)
phi = (p-1)*(q-1)
e = 5
d = 29
a = 10
b = a^e %% N
ab = b^d %% N
ab = b^d
d1 = 15
d2 = d - d1
ab = b^d1
ab = b^d1 %% N
d1 = 5
ab = b^d1 %% N
d1 = 10
ab = b^d1 %% N
d1 = 5
d2 = d %% d1
dt = d % d1
dt = d %/% d1
ab = (b^d1 %% N)
ab = (b^d1 %% N)^dt
ab = (b^d1 %% N)
ab = ((b^d1 %% N)^dt * (b^dr %% N)) %% N
dr = d %% d1
ab = ((b^d1 %% N)^dt * (b^dr %% N)) %% N
a = 1032
b = a^e %% N
ab = ((b^d1 %% N)^dt * (b^dr %% N)) %% N
a = 84
b = a^e %% N
ab = ((b^d1 %% N)^dt * (b^dr %% N)) %% N
a = c(27,04)
a = c(27,04,19,81)
b = a^e %% N
ab = ((b^d1 %% N)^dt * (b^dr %% N)) %% N
a = c("27",04,19,81)
b = a^e %% N
a = c(27,04,19,81)
b = a^e %% N
ab = ((b^d1 %% N)^dt * (b^dr %% N)) %% N
a = c(26,04,19,81)
b = a^e %% N
a = c(27,04,19,81)
b = a^e %% N
a = c(27,04,19,81)
b = a^e %% N
a = c(0,04,19,81)
b = a^e %% N
a = c(1,04,19,81)
b = a^e %% N
a = c(2,04,19,81)
b = a^e %% N
a = c(3,04,19,81)
b = a^e %% N
a = c(4,04,19,81)
b = a^e %% N
a = c(5,04,19,81)
b = a^e %% N
a = c(6,04,19,81)
b = a^e %% N
a = c(91,04,19,81)
b = a^e %% N
a = c(90,04,19,81)
b = a^e %% N
a = c(89,04,19,81)
b = a^e %% N
a = c(23,04,19,81)
a = c(27,04,19,81)
b = a^e %% N
p = 307
q = 859
N = p * q
phi = (p-1)*(q-1)
e = 1721
d = 1373
gcd
library(sos); ???gcd
ggT <- function(x, y) {
while(y) {
temp = y
y = x %% y
x = temp
}
return(x)
}
d = ggT(e,phi)
d = ggT(e,phi)
p = 11
q = 13
N = p * q
phi = (p-1)*(q-1)
e = 23
d = ggT(e,phi)
ggT <- function(x, y) {
while(y) {
temp = y
y = x %% y
x = temp
}
return(x)
}
d = ggT(e,phi)
d = ggT(phi,e)
d <- ggT(phi,e)
ggT(phi,e)
d <- ggT(5,1)
ggT(5,1)
ggT(10,12)
ggT(101,12)
ggT(35,70)
23*d + k *120 = 1
k=-9
d <- 47
k=-9
e*d + k *N
e = 23
phi = (p-1)*(q-1)
e*d + k *N
e*d
k * N
N
N = p * q
e*d + k * phi
d1 = 5
dt = d %/% d1
dr = d %% d1
a = c(27,04,19,81)
b = a^e %% N
p = 11
q = 13
N = p * q
phi = (p-1)*(q-1)
e = 23
d <- 47
d1 = 5
dt = d %/% d1
dr = d %% d1
a = c(27,04,19,81)
b = a^e %% N
p = 1143434
q = 1343344
N = p * q
phi = (p-1)*(q-1)
setwd("~/Desktop/RNASeq/")
filenameRAW <- "mPGCLC_ExpressionAll.txt"
dataRAW <- read.csv(filenameRAW,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
data <- dataRAW[,c(1,13:length(dataRAW))]
Genes <- read.table("musGenes.txt",as.is=T)[,1]
match(Genes, data[,1]) -> pos
cbind(Genes,pos,data[pos,1])
match("DKFZp434M202", data[,1])
data[pos,]->inter
data2Use <- inter
# Remove Rows with NAs
data2Use <- na.omit(data2Use)
# Remove Zero Rows
data2Use <- data2Use[apply(data2Use[,2:length(data2Use)],1,sum) !=0 ,]
#Random selection of probes
sampling <- 10000
if (nrow(data2Use)< 10000) { sampling <- nrow(data2Use)}
data2Use <- data2Use[sample(nrow(data2Use), sampling), ]
data_matrix <- data.matrix(data2Use[,2:length(data2Use)])
library("gplots")
heatmap.2(data_matrix,trace="none", density="none",
scale="row", #note this is important because it allows you to use RowZ-score, or actual values
labRow="",
dendrogram="col",
hclustfun=function(x) hclust(x,method="complete"),
distfun=function(x) as.dist((1-cor(t(x)))/2),
col = colorRampPalette(c("black", "red"))(100),srtCol=0
)
heatmap.2(data_matrix,trace="none", density="none",
main=SampleName,
scale="none",
labRow="",
dendrogram="column",
hclustfun=function(x) hclust(x,method="complete"),
distfun=function(x) dist(x,method ="euclidean"),
col = colorRampPalette(c("black", "red"))(100),srtCol=0,
key.xlab="%CpG methylation", key.title=""
)
data <- inter[,2:58]
# SamplesNames <- read.table("mPGCLC_Samples.txt",as.is=T)[,1]
# names(data) <- SamplesNames
# data <- dataRAW
# Remove Rows with NAs
data <- na.omit(data)
# Remove Zero Rows
data <- data[apply(data,1,sum) !=0 ,]
# Pricipal Components Analysis
fit <- princomp(data, cor=F)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
pca1 = prcomp(t(data), scale. = T)
pca1$sdev
head(pca1$rotation)
head(pca1$x)
#VISUALIZE
library(ggplot2)
scores1 = as.data.frame(pca1$x)
qplot(data = scores1,x = PC1, y = PC2,label = rownames(scores1),xlim=c(-10,10), ylim=c(-10,10)) +
geom_hline(yintercept = 0, colour = "grey") +
geom_vline(xintercept = 0, colour = "grey") +
geom_text(colour = "red", alpha = 0.8, size = 4) +
theme_bw() +
ggtitle(paste("PCA",filenameRAW))
filenameRAW <- "mPGCLC_RNASeqQuantAll.txt"
data <- inter[,2:58]
data <- na.omit(data)
# Remove Zero Rows
data <- data[apply(data,1,sum) !=0 ,]
data <- inter[,2:58]
data <- inter[,2:19]
data <- na.omit(data)
# Remove Zero Rows
data <- data[apply(data,1,sum) !=0 ,]
# Pricipal Components Analysis
fit <- princomp(data, cor=F)
summary(fit) # print variance accounted for
loadings(fit) # pc loadings
plot(fit,type="lines") # scree plot
fit$scores # the principal components
pca1 = prcomp(t(data), scale. = T)
pca1$sdev
head(pca1$rotation)
head(pca1$x)
#VISUALIZE
library(ggplot2)
scores1 = as.data.frame(pca1$x)
qplot(data = scores1,x = PC1, y = PC2,label = rownames(scores1),xlim=c(-10,10), ylim=c(-10,10)) +
geom_hline(yintercept = 0, colour = "grey") +
geom_vline(xintercept = 0, colour = "grey") +
geom_text(colour = "red", alpha = 0.8, size = 4) +
theme_bw() +
ggtitle(paste("PCA",filenameRAW))
library(FactoMineR)
pca2 = PCA(t(data), graph = F)
plot(pca2)
pca2$eig
pca2$var$coord
head(pca2$ind$coord,n=40)
library(ggplot2)
scores2 = as.data.frame(pca2$ind$coord)
qplot(data = scores2,x = Dim.1, y = Dim.2,xlim=c(-250,250), ylim=c(-250,250),label = rownames(scores1)) +
geom_hline(yintercept = 0, colour = "grey") +
geom_vline(xintercept = 0, colour = "grey") +
geom_text(colour = "red", alpha = 0.8, size = 4) +
theme_bw() +
ggtitle(paste("PCA",filenameRAW))
qplot(data = scores1,x = PC1, y = PC2,label = rownames(scores1),xlim=c(-10,10), ylim=c(-10,10)) +
geom_hline(yintercept = 0, colour = "grey") +
geom_vline(xintercept = 0, colour = "grey") +
geom_text(colour = "red", alpha = 0.8, size = 4) +
theme_bw() +
ggtitle(paste("PCA",filenameRAW))
