install.packages("calibrate")
setwd("C:/Users/josousa/Documents/Projects/human_ESC_naive_state_NGS/data/chee_data/RNAseq")
DataSetName <- "H9_RNAseq_Raw.txt"
#Triming the dataset
datasetInput <- read.delim(DataSetName,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
setwd("C:/Users/josousa/Documents/Projects/human_ESC_naive_state_NGS/data/chee_data/RNAseq")
DataSetName <- "H9_RNAseq_Raw.txt"
#Triming the dataset
datasetInput <- read.delim(DataSetName,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
setwd("C:/Users/josousa/Documents/Projects/human_ESC_naive_state_NGS/data/chee_data/RNAseq")
DataSetName <- "H9_RNAseq_Raw.txt"
#Triming the dataset
datasetInput <- read.delim(DataSetName,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
#Triming the dataset
datasetInput <- read.delim(~DataSetName,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
getwd("C:/Users/josousa/Documents/Projects/human_ESC_naive_state_NGS/data/chee_data/RNAseq")
setwd("C:/Users/josousa/Documents/Projects/human_ESC_naive_state_NGS/data/chee_data/RNAseq")
DataSetName <- "H9_RNAseq_Raw.txt"
#Triming the dataset
datasetInput <- read.delim(DataSetName,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
setwd("C:/Users/josousa/Documents/Projects/human_ESC_naive_state_NGS/data/chee_data/RNAseq")
DataSetName <- "H9_RNAseq_Raw.txt"
#Triming the dataset
datasetInput <- read.delim(DataSetName,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
datasetInputT <- datasetInput[,c(1,13:ncol(datasetInput))]
countdata <- datasetInputT[,c(2:4,5:7)]
rownames(countdata) <- make.unique(datasetInputT[,1], sep = ".")
#Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)
# Assign condition (First Three is cR_H9_D0, Second Three is cR_H9_D10_)
condition <- factor(c(rep("cR_H9_DO",3),rep("cR_H9_D1O",3)))
setwd("C:/Users/josousa/Documents/Projects/human_ESC_naive_state_NGS/data/chee_data/RNAseq")
DataSetName <- "H9_RNAseq_Raw.txt"
#Triming the dataset
datasetInput <- read.delim(DataSetName,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
setwd("C:/Users/josousa/Documents/Projects/human_ESC_naive_state_NGS/data/chee_data/RNAseq")
DataSetName <- "H9_RNAseq_Raw.txt"
#Triming the dataset
datasetInput <- read.delim(DataSetName,sep="\t",header=TRUE,skip=0,fill=TRUE,dec = ".",as.is=T)
datasetInputT <- datasetInput[,c(1,13:ncol(datasetInput))]
countdata <- datasetInputT[,c(2:4,5:7)]
rownames(countdata) <- make.unique(datasetInputT[,1], sep = ".")
#Convert to matrix
countdata <- as.matrix(countdata)
head(countdata)
# Assign condition (First Three is cR_H9_D0, Second Three is cR_H9_D10_)
condition <- factor(c(rep("cR_H9_DO",3),rep("cR_H9_D1O",3)))
View(countdata)
View(datasetInputT)
View(countdata)
rownames(countdata) <- make.unique(datasetInputT[,1], sep = ".")
View(countdata)
library(DESeq2)
install.packages("DESeq2")
library(DESeq2)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(DESeq2)
# Create a coldata frame and instantiate the DESeqDataSet. See ?DESeqDataSetFromMatrix
(coldata <- data.frame(row.names=colnames(countdata), condition))
dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)
dds
# Run the DESeq pipeline
dds <- DESeq(dds)
# Get differential expression results
res <- results(dds)
#res@rownames <- datasetInputT[,1]
table(res$padj<0.05)
## Order by adjusted p-value
res <- res[order(res$padj), ]
## Merge with normalized count data
resdata <- merge(as.data.frame(res), as.data.frame(counts(dds, normalized=TRUE)), by="row.names", sort=FALSE)
names(resdata)[1] <- "Gene"
head(resdata)
## Write results
write.csv(resdata, file="diffexpr-results.csv")
log2(rowMeans(resdata[,8:10])) ->log.cR_H9_DO
log2(rowMeans(resdata[,11:13])) ->log.cR_H9_D1O
cbind(resdata,log.cR_H9_DO,log.cR_H9_D1O) -> log.resdata
#checking whether there is duplicated genes
sum(duplicated(log.resdata$Gene))
#Filter genes with p-value above 0.05
filtered.log.resdata<-log.resdata[log.resdata$pvalue <0.05,]
#Filter the NA values in p-value
filtered.log.resdata<-filtered.log.resdata[!is.na(filtered.log.resdata$pvalue),]
#High in D0 and Low in D10
sum (filtered.log.resdata$log.cR_H9_D1O < 4 & filtered.log.resdata$log.cR_H9_DO >4)
HighD0LowD10<- filtered.log.resdata [filtered.log.resdata$log.cR_H9_D1O < 4 & filtered.log.resdata$log.cR_H9_DO >4,]
#High in D10 and Low in D0
sum (filtered.log.resdata$log.cR_H9_DO < 4 & filtered.log.resdata$log.cR_H9_D1O >4)
HighD10LowD0<- filtered.log.resdata [filtered.log.resdata$log.cR_H9_DO < 4 & filtered.log.resdata$log.cR_H9_D1O >4,]
# Write results
write.csv(HighD0LowD10, file="HighD0LowD10.csv")
write.csv(HighD10LowD0, file="HighD10LowD0.csv")
#Filtering Genes from Main Table before filtering for P value to get the HighHigh and LowLow
#High in D0 and High in D10
sum (log.resdata$log.cR_H9_DO > 4 & log.resdata$log.cR_H9_D1O >4)
HighD10HighD0<- log.resdata [log.resdata$log.cR_H9_DO > 4 & log.resdata$log.cR_H9_D1O >4,]
Filtered.HighHigh <-HighD10HighD0 [order(-HighD10HighD0$log.cR_H9_DO),]
Filtered.HighHigh<-Filtered.HighHigh[c(1:2000),]
#Low in D0 and Low in D10
sum (log.resdata$log.cR_H9_DO < 4 & log.resdata$log.cR_H9_D1O < 4)
LowD10LowD0<- log.resdata [log.resdata$log.cR_H9_DO < 4 & log.resdata$log.cR_H9_D1O <4,]
Filtered.LowLow <-LowD10LowD0 [order(LowD10LowD0$log.cR_H9_DO),]
Filtered.LowLow<-Filtered.LowLow[c(1:2000),]
# Write results
write.csv(Filtered.HighHigh, file="HighD10HighD0.csv")
write.csv(Filtered.LowLow, file="LowD10LowD0.csv")
# Regularized log transformation for clustering/heatmaps, etc
rld <- rlogTransformation(dds)
head(assay(rld))
hist(assay(rld))
# Plot dispersions
#png("qc-dispersions.png", 1000, 1000, pointsize=20)
plotDispEsts(dds, main="Dispersion plot")
#dev.off()
DESeq2::plotPCA(rld, intgroup="condition")
library(RColorBrewer)
(mycols <- brewer.pal(8, "Dark2")[1:length(unique(condition))])
rld_pca <- function (rld, intgroup = "condition", ntop = 500, colors=NULL, legendpos="bottomleft", main="PCA Biplot", textcx=1, ...) {
require(genefilter)
require(calibrate)
require(RColorBrewer)
rv = rowVars(assay(rld))
select = order(rv, decreasing = TRUE)[seq_len(min(ntop, length(rv)))]
pca = prcomp(t(assay(rld)[select, ]))
fac = factor(apply(as.data.frame(colData(rld)[, intgroup, drop = FALSE]), 1, paste, collapse = " : "))
if (is.null(colors)) {
if (nlevels(fac) >= 3) {
colors = brewer.pal(nlevels(fac), "Paired")
}   else {
colors = c("black", "red")
}
}
pc1var <- round(summary(pca)$importance[2,1]*100, digits=1)
pc2var <- round(summary(pca)$importance[2,2]*100, digits=1)
pc1lab <- paste0("PC1 (",as.character(pc1var),"%)")
pc2lab <- paste0("PC1 (",as.character(pc2var),"%)")
plot(PC2~PC1, data=as.data.frame(pca$x), bg=colors[fac], pch=21, xlab=pc1lab, ylab=pc2lab, main=main, ...)
with(as.data.frame(pca$x), textxy(PC1, PC2, labs=rownames(as.data.frame(pca$x)), cex=textcx))
legend(legendpos, legend=levels(fac), col=colors, pch=20)
#     rldyplot(PC2 ~ PC1, groups = fac, data = as.data.frame(pca$rld),
#            pch = 16, cerld = 2, aspect = "iso", col = colours, main = draw.key(key = list(rect = list(col = colours),
#                                                                                         terldt = list(levels(fac)), rep = FALSE)))
}
#png("qc-pca.png", 1000, 1000, pointsize=20)
rld_pca(rld, colors=mycols, intgroup="condition", xlim=c(-75, 35))
#dev.off()
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
